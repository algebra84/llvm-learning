int 'int'	 [StartOfLine]	Loc=<test.c:1:1>
identifier 'foo'	 [LeadingSpace]	Loc=<test.c:1:5>
l_paren '('		Loc=<test.c:1:8>
int 'int'		Loc=<test.c:1:9>
identifier 'a'	 [LeadingSpace]	Loc=<test.c:1:13>
comma ','		Loc=<test.c:1:14>
int 'int'	 [LeadingSpace]	Loc=<test.c:1:16>
identifier 'b'	 [LeadingSpace]	Loc=<test.c:1:20>
r_paren ')'		Loc=<test.c:1:21>
l_brace '{'		Loc=<test.c:1:22>
identifier 'x'	 [StartOfLine] [LeadingSpace]	Loc=<test.c:2:3>
semi ';'		Loc=<test.c:2:4>
int 'int'	 [StartOfLine] [LeadingSpace]	Loc=<test.c:3:3>
identifier 'y'	 [LeadingSpace]	Loc=<test.c:3:7>
equal '='	 [LeadingSpace]	Loc=<test.c:3:9>
numeric_constant '3'	 [LeadingSpace]	Loc=<test.c:3:11>
semi ';'		Loc=<test.c:3:12>
int 'int'	 [StartOfLine] [LeadingSpace]	Loc=<test.c:4:3>
identifier 'z'	 [LeadingSpace]	Loc=<test.c:4:7>
equal '='	 [LeadingSpace]	Loc=<test.c:4:9>
identifier 'x'	 [LeadingSpace]	Loc=<test.c:4:11>
plus '+'		Loc=<test.c:4:12>
identifier 'y'		Loc=<test.c:4:13>
semi ';'		Loc=<test.c:4:14>
identifier 'printf'	 [StartOfLine] [LeadingSpace]	Loc=<test.c:5:3>
l_paren '('		Loc=<test.c:5:9>
string_literal '"z"'		Loc=<test.c:5:10>
r_paren ')'		Loc=<test.c:5:13>
semi ';'		Loc=<test.c:5:14>
return 'return'	 [StartOfLine] [LeadingSpace]	Loc=<test.c:6:3>
identifier 'a'	 [LeadingSpace]	Loc=<test.c:6:10>
plus '+'		Loc=<test.c:6:11>
identifier 'b'		Loc=<test.c:6:12>
plus '+'		Loc=<test.c:6:13>
identifier 'z'		Loc=<test.c:6:14>
r_brace '}'	 [StartOfLine]	Loc=<test.c:7:1>
eof ''		Loc=<test.c:7:2>
